/* --- Base Styles --- */
html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  background: #111;
  overflow: hidden;
  transition: background-color 0.5s ease;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
}
body.light-mode {
  background: #f0f0f0;
}

#tsparticles {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
}

/* --- Glassmorphism Button Base Style --- */
.glass-button {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: all 0.3s ease;
  color: white;
  user-select: none;
  flex-shrink: 0;
}
.glass-button:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.1);
}
.glass-button.disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: scale(1) !important;
  background: rgba(255, 255, 255, 0.1) !important;
  pointer-events: none;
}
body.light-mode .glass-button {
  background: rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(0, 0, 0, 0.2);
  color: #333;
}
body.light-mode .glass-button:hover {
  background: rgba(0, 0, 0, 0.2);
}
body.light-mode .glass-button.disabled {
  background: rgba(0, 0, 0, 0.1) !important;
}

/* --- ACCESSIBILITY: Visible Focus Indicator --- */
.glass-button:focus-visible, .modal-close-btn:focus-visible {
  outline: 3px solid #87CEEB;
  outline-offset: 3px;
  box-shadow: 0 0 10px #87CEEB;
}

body.light-mode .glass-button:focus-visible,
body.light-mode .modal-close-btn:focus-visible {
  outline-color: #4361ee;
  box-shadow: 0 0 10px #4361ee;
}

#chaos-slider:focus-visible::-webkit-slider-thumb {
  outline: 3px solid #87CEEB;
  outline-offset: 3px;
}

body.light-mode #chaos-slider:focus-visible::-webkit-slider-thumb {
  outline-color: #4361ee;
}

/* --- ACCESSIBILITY: Visually Hidden Class for Screen Readers --- */
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}


/* --- Corner Buttons --- */
#fullscreen-btn {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 100;
}

/* --- Menu Styles --- */
.menu-container {
  position: fixed;
  bottom: 20px;
  left: 20px;
  z-index: 100;
  display: flex;
  align-items: flex-end;
  gap: 8px;
  max-width: calc(100vw - 20px);
}

.menu-button.active {
  background: rgba(142, 45, 226, 0.8);
  color: #fff;
}
body.light-mode .menu-button.active {
  background: rgba(67, 97, 238, 0.8);
  color: #fff;
}

.sub-menu {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  transform-origin: left center;
  transform: scaleX(0);
  opacity: 0;
  transition: transform 0.4s cubic-bezier(0.23, 1, 0.32, 1), opacity 0.3s ease;
  width: 290px;
}
/* --- ACCESSIBILITY: Style for fieldset to remove default styling --- */
.sub-menu fieldset {
    border: none;
    padding: 0;
    margin: 0;
    display: contents; /* Allows flexbox layout to work on children */
}
 @media (max-width: 660px) {
  .sub-menu {
      width: 290px;
  }
  .submenu-divider {
      width: 280px;
      margin: 4px auto;
  }
}
.menu-container.active .sub-menu {
  transform: scaleX(1);
  opacity: 1;
}

/* --- Intensity Slider --- */
.slider-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 280px;
  height: 48px;
  border-radius: 24px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(10px);
  color: white;
  padding: 0 15px;
  box-sizing: border-box;
}
body.light-mode .slider-container {
  background: rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(0, 0, 0, 0.2);
  color: #333;
}
#chaos-slider {
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  height: 4px;
  background: rgba(255, 255, 255, 0.3);
  border-radius: 2px;
  outline: none;
  cursor: pointer;
  transition: background 0.3s;
}
body.light-mode #chaos-slider {
  background: rgba(0, 0, 0, 0.2);
}
#chaos-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 18px;
  height: 18px;
  background: #fff;
  border-radius: 50%;
  border: 2px solid #8e2de2;
  transition: transform 0.2s ease;
}
#chaos-slider::-moz-range-thumb {
  width: 18px;
  height: 18px;
  background: #fff;
  border-radius: 50%;
  border: 2px solid #8e2de2;
  transition: transform 0.2s ease;
}
#chaos-slider:hover::-webkit-slider-thumb, #chaos-slider:hover::-moz-range-thumb {
  transform: scale(1.2);
}
body.light-mode #chaos-slider::-webkit-slider-thumb, body.light-mode #chaos-slider::-moz-range-thumb {
  border-color: #4361ee;
}
#chaos-display {
  font-size: 18px;
  font-weight: bold;
  min-width: 24px;
  text-align: center;
  margin-left: 10px;
}

/* --- Sub-menu Divider --- */
.submenu-divider {
  flex-basis: 100%;
  height: 1px;
  background: rgba(255, 255, 255, 0.2);
  margin: 4px 0;
  border: none;
}
body.light-mode .submenu-divider {
  background: rgba(0, 0, 0, 0.2);
}

/* --- Modal Styles --- */
.modal-overlay {
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background: rgba(0, 0, 0, 0.6); backdrop-filter: blur(5px);
  display: flex; justify-content: center; align-items: center;
  z-index: 200; opacity: 0; visibility: hidden; transition: opacity 0.4s ease, visibility 0.4s ease;
}
.modal-overlay.visible { opacity: 1; visibility: visible; }
.modal-content {
  background: rgba(40, 40, 40, 0.8); color: #eee;
  padding: 30px; border-radius: 20px; border: 1px solid rgba(255, 255, 255, 0.2);
  width: 90%; max-width: 550px; box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
  transform: scale(0.9); transition: transform 0.4s cubic-bezier(0.23, 1, 0.32, 1);
  max-height: 85vh; overflow-y: auto;
  text-align: center;
}
.modal-overlay.visible .modal-content { transform: scale(1); }
body.light-mode .modal-content { background: rgba(255, 255, 255, 0.8); color: #333; border-color: rgba(0, 0, 0, 0.2); }
.modal-content h2 { margin-top: 0; border-bottom: 1px solid rgba(255, 255, 255, 0.3); padding-bottom: 10px; }
body.light-mode .modal-content h2 { border-bottom-color: rgba(0, 0, 0, 0.2); }
.modal-content p { line-height: 1.6; }
.modal-content strong { color: #fff; }
body.light-mode .modal-content strong { color: #000; }
.modal-content a { color: #87CEEB; text-decoration: none; transition: color 0.3s; }
.modal-content a:hover { color: #9370DB; }
body.light-mode .modal-content a { color: #4361ee; }
body.light-mode .modal-content a:hover { color: #7209b7; }


.modal-close-btn {
  display: block; margin: 20px auto 0; padding: 12px 25px; border: none;
  border-radius: 25px; background: rgba(142, 45, 226, 0.8); color: white;
  font-size: 16px; cursor: pointer; transition: all 0.3s ease;
  text-decoration: none;
  width: fit-content;
}
.modal-close-btn:hover { background: rgba(142, 45, 226, 1); }
body.light-mode .modal-close-btn { background: rgba(67, 97, 238, 0.8); }
body.light-mode .modal-close-btn:hover { background: rgba(67, 97, 238, 1); }

.info-list { list-style: none; padding: 0; }
.info-list li { display: flex; align-items: center; margin-bottom: 15px; }
.info-list .icon-wrapper { width: 30px; height: 30px; flex-shrink: 0; display: inline-flex; align-items: center; justify-content: center; margin-right: 15px; }
.info-list .icon-wrapper svg { width: 20px; height: 20px; }
.info-text { text-align: left; }
.info-text strong { display: block; font-size: 1.1em; margin-bottom: 2px; }
.info-text span { font-size: 0.9em; opacity: 0.8; }

/* --- Toast Notification --- */
#toast-notification {
  position: fixed;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(30, 30, 30, 0.85);
  color: white;
  padding: 12px 25px;
  border-radius: 25px;
  z-index: 300;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.4s ease, visibility 0.4s ease, bottom 0.4s ease;
  font-size: 14px;
  backdrop-filter: blur(5px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}
#toast-notification.show {
  bottom: 100px;
  opacity: 1;
  visibility: visible;
}
body.light-mode #toast-notification {
    background: rgba(245, 245, 245, 0.85);
    color: #333;
    border: 1px solid rgba(0,0,0,0.1);
}

/* --- Custom Tooltip --- */
#custom-tooltip {
  position: fixed;
  z-index: 999;
  padding: 10px 15px;
  border-radius: 12px;
  font-size: 14px;
  line-height: 1.5;
  max-width: 280px;
  text-align: left;
  pointer-events: none;
  opacity: 0;
  visibility: hidden;
  transform: scale(0.9);
  transition: opacity 0.2s ease, transform 0.2s ease, visibility 0.2s;
  
  background: rgba(230, 230, 230, 0.25);
  border: 1px solid rgba(255, 255, 255, 0.3);
  backdrop-filter: blur(12px);
  -webkit-backdrop-filter: blur(12px);
  color: #f0f0f0;
  box-shadow: 0 4px 20px rgba(0,0,0,0.2);
}
#custom-tooltip.visible {
  opacity: 1;
  visibility: visible;
  transform: scale(1);
}
#custom-tooltip strong {
  display: block;
  margin-bottom: 5px;
  font-weight: 600;
  color: #ffffff;
}
#custom-tooltip span {
  opacity: 0.9;
}
body.light-mode #custom-tooltip {
  background: rgba(30, 30, 30, 0.25);
  border: 1px solid rgba(0, 0, 0, 0.2);
  color: #222;
}
body.light-mode #custom-tooltip strong {
   color: #000000;
}```

---

### `js/state.js`

This module centralizes the application's state variables and provides functions to manage them.

```javascript
// Holds the application's state. Exported so other modules can read from it.
export const state = {
    particlesContainer: null,
    chaosLevel: 5,
    isDarkMode: true,
    isCursorParticle: false,
    isGravityOn: false,
    areWallsOn: false,
    isPaused: false,
    currentConfig: {},
    originalInteractionModes: {},
    originalOutModes: {},
    configHistory: [],
    configForwardHistory: [],
    lastFocusedElement: null
};

// Functions to modify the state

export function setParticlesContainer(container) {
    state.particlesContainer = container;
}

export function setChaosLevel(level) {
    state.chaosLevel = level;
    localStorage.setItem('tsDiceChaos', level);
}

export function toggleDarkMode() {
    state.isDarkMode = !state.isDarkMode;
    localStorage.setItem('tsDiceTheme', state.isDarkMode ? 'dark' : 'light');
    return state.isDarkMode;
}

export function toggleCursorParticle() {
    state.isCursorParticle = !state.isCursorParticle;
    return state.isCursorParticle;
}

export function toggleGravity() {
    state.isGravityOn = !state.isGravityOn;
    return state.isGravityOn;
}

export function toggleWalls() {
    state.areWallsOn = !state.areWallsOn;
    return state.areWallsOn;
}

export function togglePaused() {
    state.isPaused = !state.isPaused;
    return state.isPaused;
}

export function setCurrentConfig(config) {
    state.currentConfig = config;
    try {
        localStorage.setItem('tsDiceLastConfig', JSON.stringify(config));
    } catch (e) {
        console.warn("Could not save config to localStorage, it might be too large.");
    }
}

export function setOriginalInteractionModes(modes) {
    state.originalInteractionModes = modes;
}

export function setOriginalOutModes(modes) {
    state.originalOutModes = modes;
}

export function saveHistory() {
    if (Object.keys(state.currentConfig).length > 0) {
        state.configHistory.push(JSON.parse(JSON.stringify(state.currentConfig)));
        if (state.configHistory.length > 20) {
            state.configHistory.shift();
        }
    }
}

export function clearForwardHistory() {
    state.configForwardHistory = [];
}

export function popHistory() {
    if (state.configHistory.length > 0) {
        state.configForwardHistory.push(JSON.parse(JSON.stringify(state.currentConfig)));
        return state.configHistory.pop();
    }
    return null;
}

export function popForwardHistory() {
    if (state.configForwardHistory.length > 0) {
        saveHistory(); // Save current state before moving forward
        return state.configForwardHistory.pop();
    }
    return null;
}

export function setLastFocused(element) {
    state.lastFocusedElement = element;
}
